https://leetcode.com/problems/find-the-duplicate-number/submissions/

#VerYIMP Binary Search
/*
Time Complexity: O(nlogn)
The outer loop uses binary search to identify a candidate - this runs in O(logn) time. 
For each candidate, we iterate over the entire array which takes O(n)time, resulting in a total of O(nlogn) time.
Space Complexity: O(1)
No additional storage is needed (barring a few variables), resulting in a constant O(1) space complexity.
*/
 For example: in [4,3,4,5,2,4,1], 3 has 3 numbers less than or equal to it.
 However, the duplicate number will have a count of numbers less than or equal to itself, 
 that is greater than itself (in this example, 4, which is the duplicate, has 6 numbers that are less than or equal to it).
 Hence, the smallest number that satisfies this property is the duplicate number.
 
Not sorting the array but l=1 to h=nums.size() is actually working as a sorted array

 class Solution {
public:
    int findDuplicate(vector<int>& nums) {
       int l=1,h=nums.size();
        int c;
        int ans=-1;
        while(l<=h)
        {
            int mid=l+(h-l)/2;
            c=0;
            //counting for every mid which has count of numbers less than it , greater than the number itself
            for(int i:nums)
            {
            if(i<=mid)
                c++;
            }
            // the number which satisfies count > mid (the number itself) is the current answer
            if(c>mid)
            {
                ans=mid;
                h=mid-1;
            }
            // in this case look in the other part after mid and no curr answer recorded since count<=mid
            else
            {
                l=mid+1;
            }
        }
        return ans;
    }
};

# O(n) & O(1) solutions below : 

#Negative Marking
/* For example, if the input array is [1, 3, 3, 2], then for 1, 
flip the number at index 1, making the array [1,-3,3,2].
Next, for -3 flip the number at index 3, making the array [1,-3,3,-2].
Finally, when we reach the second 3, we'll notice that nums[3] is already negative,
indicating that 3 has been seen before and hence is the duplicate number. */

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int ans=0;
        for(int i:nums)
        {
            int curr=abs(i);
            if(nums[curr]<0){
                ans=curr;
                break;
            }
            else
                nums[curr]*=-1;
        }
        return ans;
    }
};

#Swapping
•	[3,3,5,4,1,3] // Compare nums[0] to nums[nums[0]] (i.e. nums[0] to nums[3]). 3 != 4. Swap them. Now the first 3 will be swapped into its correct position, and position 0 has 4.
•	[4,3,5,3,1,3] // Compare nums[0] to nums[4]. 4 != 1. Not equal, so swap again. Now 4 is in its correct position.
•	[1,3,5,3,4,3] // Compare nums[0] with nums[1]. Not equal, swap.
•	[3,1,5,3,4,3] // Now nums[0] == nums[3] (both are 3). That's it! 3 is in both positions 0 and position 3, so it's the duplicate.

 int findDuplicate(vector<int>& nums) {
        while (nums[0] != nums[nums[0]])
            swap(nums[0], nums[nums[0]]);
        return nums[0];
    }