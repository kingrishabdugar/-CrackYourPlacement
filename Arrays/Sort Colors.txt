* Consider three pointers low = 0, mid = 0, high = nums.size() - 1
* The algorithm ensures that at any point, every element before low is 0, every element after high is 2, every element in between are either 0, 1 or 2 i.e. unprocessed.
* We'll use mid pointer to traverse and check the array elements i.e. while(mid <= high). Three cases are possible:
o nums[mid] == 0 In this case swap(nums[low], nums[mid] and increment both low and mid pointer i.e. low++ mid++
o nums[mid] == 1 In this case mid++
o nums[mid] == 2 In this case swap(nums[mid], nums[high] and decrement high pointer i.e. high—

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int l=0, h=nums.size()-1, mid=0;
        while(mid<=h)
        {
             if(nums[mid]==0)
                {
                    swap(nums[mid],nums[l]);
                    l++;
                    mid++;
                }
            else if(nums[mid]==1)
                mid++;
            else if(nums[mid]==2)
                {
                    swap(nums[mid],nums[h]);
                    h--;
                }
        }
    }
};



OR

    void sortColors(vector<int>& nums) {
        
        // initialize variables:
        int low = 0, mid = 0, high = nums.size() - 1;
        
        // logic:
        while(mid <= high)
        {
            switch(nums[mid])
            {
                case 0: swap(nums[low++], nums[mid++]); break;
                
                case 1: mid++; break;
                
                case 2: swap(nums[mid], nums[high--]); break;
            }
        }
    }



